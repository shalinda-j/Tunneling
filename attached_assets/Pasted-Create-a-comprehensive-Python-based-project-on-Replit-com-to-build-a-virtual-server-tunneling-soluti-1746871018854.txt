Create a comprehensive Python-based project on Replit.com to build a virtual server tunneling solution that connects a local PC in Sri Lanka to AWS, enabling high-speed, low-latency internet access through an AWS EC2 instance, with the goal of maximizing throughput (targeting up to 1 Gbps, constrained by a 1.5 Mbps local ISP). The project should use Python 3.8+ for scripting, leveraging the WireGuard VPN protocol for lightweight, high-performance tunneling due to its low overhead and compatibility with AWS. The final result must allow the local PC to tunnel traffic through an AWS EC2 instance in the ap-southeast-1 (Singapore) region, using enhanced networking for up to 1 Gbps connectivity within AWS, and route specific or all internet traffic through the tunnel. The project must include:Project Setup on Replit: Initialize a Python project on Replit with a clear directory structure (e.g., /scripts, /config, /docs). Install necessary dependencies (e.g., python-wireguard, boto3 for AWS SDK) via Replit’s requirements.txt. Include a README.md explaining the project’s purpose, setup instructions, and limitations (e.g., local ISP bottleneck).AWS EC2 Instance Configuration: Write a Python script (setup_ec2.py) using boto3 to programmatically launch an EC2 instance (e.g., c5n.large with enhanced networking) in ap-southeast-1. Configure the instance with:Ubuntu 20.04 LTS AMI.Security group allowing UDP 51820 (WireGuard default port), SSH (22), and optional HTTP/HTTPS (80/443) for testing.Elastic IP for static addressing.At least 10 Gbps network bandwidth (via enhanced networking). Save AWS credentials in a secure .env file (loaded via python-dotenv) and exclude it from version control using .gitignore.WireGuard VPN Server Setup: Create a script (configure_wireguard.py) to automate WireGuard installation and configuration on the EC2 instance via SSH (using paramiko for SSH automation). The script should:Install WireGuard on the EC2 instance.Generate public/private key pairs for the server and client (local PC).Configure the WireGuard server (wg0.conf) to listen on UDP 51820, assign a private IP range (e.g., 10.0.0.1/24), and enable IP forwarding.Set up NAT (Network Address Translation) to allow the EC2 instance to forward client traffic to the internet (using iptables).Save the client configuration (client.conf) for download.Local PC Client Configuration: Provide a script (setup_client.py) to guide the user in installing WireGuard on their local PC (Ubuntu/Windows) and applying the client configuration. Include instructions for manual setup if automation isn’t feasible. The client should connect to the EC2 instance’s public IP over the WireGuard tunnel, routing either all traffic (full tunnel) or specific traffic (split tunnel, e.g., AWS IPs) through the EC2 instance.Traffic Routing and Optimization: Implement a script (optimize_tunnel.py) to:Test tunnel performance using iperf3 (install on both EC2 and client).Adjust MTU (e.g., 1280 for WireGuard) to minimize fragmentation.Enable split tunneling for AWS-specific traffic (e.g., S3, EC2) to reduce latency, using route tables or a proxy (e.g., Squid).Monitor latency and throughput, logging results to a file (tunnel_metrics.log).Testing and Validation: Write a test script (test_tunnel.py) to verify the tunnel’s functionality by:Pinging the EC2 instance’s private IP (e.g., 10.0.0.1).Measuring download/upload speeds through the tunnel using speedtest-cli.Confirming access to AWS services (e.g., S3 bucket) with lower latency than the local ISP.Logging results to test_results.txt.Documentation and Deployment: Include a /docs folder with:A setup guide (setup_guide.md) detailing AWS account setup, Replit usage, and EC2/WireGuard configuration.A troubleshooting guide (troubleshoot.md) for common issues (e.g., tunnel disconnects, low throughput).Instructions to deploy the WireGuard server on the EC2 instance (not Replit) due to Replit’s resource limits. Provide a script (deploy.sh) to automate copying configuration files to the EC2 instance via SCP.Constraints and Notes:Acknowledge that the local ISP’s 1.5 Mbps uplink caps throughput, making 1 Gbps unachievable without upgrading to fiber (e.g., SLT’s 100 Mbps plan).Explain that AWS Direct Connect is infeasible for individual use in Sri Lanka due to the lack of local Direct Connect locations (nearest: Singapore) and high costs ($200–$500/month for 1 Gbps).Use the EC2 instance’s public internet connection (up to 1 Gbps with enhanced networking) as a proxy for high-speed tunneling.Ensure all scripts handle errors gracefully (e.g., AWS API failures, SSH connection issues) and log them using Python’s logging module.Include cost estimates: EC2 c5n.large ($0.10/hour), data transfer out ($0.09/GB in ap-southeast-1), and WireGuard (free).Deliverables:Fully functional Replit project with all scripts, configurations, and documentation.A working WireGuard VPN tunnel from the local PC to the EC2 instance, verified to reduce latency for AWS services (e.g., S3 access in <50 ms vs. 200 ms over local ISP).Instructions to achieve the best possible speed (e.g., 1–2 Mbps with 1.5 Mbps ISP, or 100 Mbps with fiber).A main.py script to orchestrate setup, configuration, and testing with user-friendly prompts.Use Replit’s Python 3.8+ environment, install dependencies (boto3, paramiko, python-dotenv, speedtest-cli, iperf3), and test locally before deploying to AWS. Ensure the project is modular, well-commented, and follows Python PEP 8 style guidelines. Provide a final note in README.md recommending a local fiber upgrade (e.g., SLT-Mobitel’s 100 Mbps plan) or Starlink (50–200 Mbps) for higher speeds, as the 1.5 Mbps ISP limits the tunnel’s effectiveness."