Develop an advanced Python-based project on to create a high-reliability virtual server tunneling solution that connects a local PC in Sri Lanka to AWS, maximizing internet throughput (targeting 1 Gbps, constrained by a 1.5 Mbps ISP) and achieving near-100% reliability for AWS-specific traffic (e.g., S3, EC2). The project must integrate a mathematical model based on network flow and queueing theory to optimize bandwidth, latency, and packet loss, and use cutting-edge technologies like WireGuard VPN, AWS EC2 with enhanced networking, and reinforcement learning for dynamic routing. The solution should run on Python 3.8+, be deployable from Replit, and include a scalable algorithm to handle future ISP upgrades (e.g., 100 Mbps fiber). The final deliverable connects the local PC to an EC2 instance in ap-southeast-1 (Singapore) via a WireGuard tunnel, routing traffic to achieve the best possible speed and reliability. The project must include:

1. **Mathematical Model for Network Optimization**:
   - Develop a model combining **network flow theory** (to maximize throughput) and **M/M/1 queueing theory** (to minimize latency and packet loss). Define variables:
     - \( B_{\text{local}} \): Local ISP bandwidth (1.5 Mbps = 0.0015 Gbps).
     - \( B_{\text{ec2}} \): EC2 instance egress bandwidth (up to 1 Gbps with enhanced networking).
     - \( L_{\text{tunnel}} \): Tunnel latency (ms), including propagation and processing delays.
     - \( P_{\text{loss}} \): Packet loss probability.
     - \( Q_{\text{queue}} \): Queue length at the EC2 instance for forwarded traffic.
   - Objective: Maximize effective throughput \( T_{\text{eff}} = B_{\text{local}} \cdot (1 - P_{\text{loss}}) \) while minimizing \( L_{\text{tunnel}} + Q_{\text{queue}} \cdot T_{\text{service}} \), where \( T_{\text{service}} \) is the EC2 processing time per packet.
   - Constraints:
     - \( B_{\text{local}} \leq 0.0015 \) Gbps (current ISP).
     - \( L_{\text{tunnel}} \geq 20 \) ms (Sri Lanka to Singapore).
     - \( P_{\text{loss}} \leq 0.01 \) (target 1% max loss).
   - Use the model to dynamically adjust MTU, buffer sizes, and routing priorities (e.g., prioritize AWS IPs).

2. **Project Setup on Replit**:
   - Initialize a Python project with directories: `/scripts`, `/config`, `/models`, `/docs`.
   - Install dependencies in `requirements.txt`:
     ```
     boto3==1.34.0
     paramiko==3.4.0
     python-dotenv==1.0.0
     speedtest-cli==2.1.3
     numpy==1.24.0
     scikit-learn==1.3.0
     tensorflow==2.12.0
     ```
   - Create a `README.md` detailing the project’s purpose, mathematical model, setup steps, and limitations (e.g., ISP bottleneck).

3. **AWS EC2 Instance Setup**:
   - Write a script (`setup_ec2.py`) using `boto3` to launch a `c5n.large` EC2 instance in ap-southeast-1 with:
     - Ubuntu 20.04 LTS AMI.
     - Enhanced networking (up to 25 Gbps intra-AWS).
     - Security group allowing UDP 51820 (WireGuard), TCP 22 (SSH), and TCP 80/443 (testing).
     - Elastic IP for static addressing.
   - Store AWS credentials in `.env` (e.g., `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`) and exclude from version control via `.gitignore`.
   - Configure instance to support jumbo frames (MTU 9001) and enable IP forwarding.

4. **WireGuard VPN Server Configuration**:
   - Create a script (`configure_wireguard.py`) using `paramiko` to automate WireGuard setup on the EC2 instance:
     - Install WireGuard and generate server/client key pairs.
     - Configure `wg0.conf` with private IP range (e.g., `10.0.0.1/24`), UDP 51820, and NAT for internet forwarding.
     - Optimize MTU (e.g., 1280) based on the mathematical model to minimize fragmentation.
     - Save client config (`client.conf`) for local PC.
   - Implement failover by monitoring tunnel status and restarting WireGuard if disconnected.

5. **Reinforcement Learning for Dynamic Routing**:
   - Develop a script (`optimize_routing.py`) using TensorFlow to implement a reinforcement learning (RL) agent (e.g., Q-learning) to dynamically adjust routing:
     - **State**: Current throughput, latency, packet loss (measured via `iperf3` or `ping`).
     - **Actions**: Adjust MTU, enable/disable split tunneling, prioritize AWS IPs.
     - **Reward**: \( R = w_1 \cdot T_{\text{eff}} - w_2 \cdot L_{\text{tunnel}} - w_3 \cdot P_{\text{loss}} \), where \( w_1, w_2, w_3 \) are weights (e.g., 0.5, 0.3, 0.2).
     - Train the RL agent on Replit using simulated network data (e.g., numpy-generated latency/throughput samples).
     - Deploy the trained model to adjust routing in real-time on the EC2 instance.
   - Fallback to static routing (e.g., prioritize `s3.ap-southeast-1.amazonaws.com`) if RL fails.

6. **Local PC Client Setup**:
   - Provide a script (`setup_client.py`) to guide WireGuard installation on the local PC (Ubuntu/Windows) and apply `client.conf`. Include manual instructions:
     - Ubuntu: `sudo apt install wireguard; wg-quick up client.conf`.
     - Windows: Install WireGuard client from wireguard.com and import `client.conf`.
   - Configure split tunneling to route AWS traffic (e.g., `AllowedIPs = 52.94.0.0/16`) through the tunnel and other traffic via the local ISP.

7. **Performance Monitoring and Optimization**:
   - Create a script (`monitor_tunnel.py`) to:
     - Measure throughput, latency, and packet loss using `speedtest-cli` and `iperf3`.
     - Log metrics to `tunnel_metrics.csv` for analysis.
     - Adjust MTU or buffer sizes based on the mathematical model if \( P_{\text{loss}} > 0.01 \) or \( L_{\text{tunnel}} > 50 \) ms.
     - Alert the user (via email or Replit console) if tunnel uptime drops below 99.9%.
   - Use numpy to analyze metrics and suggest ISP upgrades (e.g., fiber) if \( T_{\text{eff}} < 0.0015 \) Gbps.

8. **Testing and Validation**:
   - Write a script (`test_tunnel.py`) to verify:
     - Tunnel connectivity (ping `10.0.0.1`).
     - AWS service access (e.g., download from S3 bucket in <50 ms).
     - Throughput (target 1–2 Mbps with 1.5 Mbps ISP).
     - Reliability (simulate 100 connections with <1% failure rate).
   - Log results to `test_results.txt` and visualize using matplotlib (e.g., throughput vs. time).

9. **Deployment and Redundancy**:
   - Create a `deploy.sh` script to copy configurations to the EC2 instance via SCP.
   - Implement redundancy by launching a second EC2 instance in ap-south-1 (Mumbai) as a failover, using WireGuard’s `PersistentKeepalive` to detect primary server outages.
   - Use AWS Route 53 for DNS-based failover if the primary EC2 instance fails.

10. **Documentation and Scalability**:
    - Include `/docs` with:
      - `setup_guide.md`: AWS setup, Replit usage, EC2/WireGuard configuration.
      - `math_model.md`: Explain the network flow and queueing model, including equations and assumptions.
      - `troubleshoot.md`: Address issues like tunnel drops, high latency, or RL convergence failures.
    - Ensure scripts are scalable for higher ISP speeds (e.g., 100 Mbps fiber) by parameterizing bandwidth constraints in the model.

11. **Constraints and Notes**:
    - Acknowledge that AWS Direct Connect is infeasible for individual use in Sri Lanka (no local Direct Connect locations, high costs). Use EC2’s enhanced networking (up to 1 Gbps egress) instead.
    - Highlight the 1.5 Mbps ISP bottleneck, limiting \( T_{\text{eff}} \) to ~1–2 Mbps. Recommend SLT-Mobitel fiber (100 Mbps, ~Rs. 3,000/month) or Starlink (50–200 Mbps, Rs. 15,000/month) for scalability.
    - Ensure 99.9% reliability via redundancy, error handling, and monitoring.
    - Estimate costs: EC2 `c5n.large` (~$75/month), data transfer (~$90/TB), Replit Hacker plan (~$7/month).
    - Use Python’s `logging` module for error tracking and `try-except` blocks for robustness.

12. **Deliverables**:
    - A Replit project with all scripts, configurations, and documentation.
    - A working WireGuard tunnel with RL-optimized routing, achieving ~1–2 Mbps throughput and <50 ms latency to AWS services.
    - A mathematical model implemented in Python, visualized in `docs/math_model.md`.
    - A `main.py` script with a CLI interface (e.g., `python main.py --setup --optimize --test`) for user-friendly execution.

Use Replit’s Python 3.8+ environment, test locally, and deploy the WireGuard server on the EC2 instance. Ensure code follows PEP 8, is modular, and includes comments explaining the mathematical model and RL logic. Provide a final note in `README.md` emphasizing that 1 Gbps requires a fiber ISP upgrade, and the current solution maximizes performance within constraints."

### Explanation of the Prompt
- **Mathematical Model**:
  - **Network Flow**: Models the tunnel as a flow network with capacity \( B_{\text{local}} \). Maximizes \( T_{\text{eff}} \) by minimizing packet loss and optimizing routing.
  - **Queueing Theory**: Treats the EC2 instance as an M/M/1 queue, where packets arrive at rate \( \lambda = B_{\text{local}} / \text{packet_size} \) and are served at rate \( \mu = B_{\text{ec2}} / \text{packet_size} \). Minimizes queueing delay \( Q_{\text{queue}} / \mu \).
  - **Implementation**: Uses numpy to solve equations and adjust MTU/buffer sizes dynamically.
- **Reinforcement Learning**:
  - The RL agent learns optimal routing policies by trial and error, balancing throughput, latency, and loss. TensorFlow implements Q-learning, suitable for Replit’s environment.
  - The reward function prioritizes high throughput and low latency, adapting to network conditions.
- **WireGuard**: Chosen for its low overhead (~5% vs. OpenVPN’s 10–15%) and high throughput. The model optimizes MTU to avoid fragmentation.
- **EC2 Choice**: `c5n.large` supports enhanced networking (25 Gbps intra-AWS, 1 Gbps egress), minimizing AWS-side bottlenecks.
- **Reliability**: Redundant EC2 instance and Route 53 failover ensure 99.9% uptime. Monitoring scripts detect and resolve issues.
- **Scalability**: The model and scripts support higher speeds (e.g., 100 Mbps) by adjusting \( B_{\text{local}} \).

### Sample Mathematical Model (Simplified)
- **Throughput**:
  \[
  T_{\text{eff}} = B_{\text{local}} \cdot (1 - P_{\text{loss}})
  \]
  where \( P_{\text{loss}} = f(\text{MTU}, \text{buffer_size}, \text{network_congestion}) \), approximated via empirical data.

- **Latency**:
  \[
  L_{\text{total}} = L_{\text{prop}} + L_{\text{queue}} + L_{\text{process}}
  \]
  where:
  - \( L_{\text{prop}} \approx 20 \) ms (Sri Lanka to Singapore).
  - \( L_{\text{queue}} = Q_{\text{queue}} / \mu \), with \( Q_{\text{queue}} = \lambda / (\mu - \lambda) \) (M/M/1 queue).
  - \( L_{\text{process}} \approx 1 \) ms (EC2 processing).

- **Optimization**:
  Solve for MTU and buffer size to minimize \( L_{\text{total}} \) and \( P_{\text{loss}} \), subject to \( B_{\text{local}} = 0.0015 \) Gbps.

### Sample Python Code (Optimization)
```python
import numpy as np
import tensorflow as tf
import logging

# Configure logging
logging.basicConfig(filename='tunnel_metrics.log', level=logging.INFO)

# Mathematical model for throughput and latency
def calculate_throughput(b_local, p_loss):
    return b_local * (1 - p_loss)

def calculate_latency(l_prop, q_length, mu):
    l_queue = q_length / mu
    return l_prop + l_queue + 1  # 1 ms processing

# RL agent for dynamic routing
class RoutingAgent:
    def __init__(self):
        self.model = tf.keras.Sequential([
            tf.keras.layers.Dense(64, activation='relu', input_shape=(3,)),
            tf.keras.layers.Dense(32, activation='relu'),
            tf.keras.layers.Dense(4, activation='linear')  # 4 actions: adjust MTU, split tunnel, etc.
        ])
        self.model.compile(optimizer='adam', loss='mse')

    def get_action(self, state):
        # State: [throughput, latency, packet_loss]
        q_values = self.model.predict(np.array([state]))
        return np.argmax(q_values[0])

    def train(self, state, action, reward, next_state):
        target = reward + 0.9 * np.max(self.model.predict(np.array([next_state]))[0])
        target_vec = self.model.predict(np.array([state]))[0]
        target_vec[action] = target
        self.model.fit(np.array([state]), np.array([target_vec]), verbose=0)

# Example usage
b_local = 0.0015  # 1.5 Mbps
p_loss = 0.01     # 1% loss
l_prop = 20       # 20 ms propagation
mu = 1.0          # 1 Gbps / packet_size
q_length = 10     # Queue length

throughput = calculate_throughput(b_local, p_loss)
latency = calculate_latency(l_prop, q_length, mu)
logging.info(f"Throughput: {throughput} Gbps, Latency: {latency} ms")

# RL optimization
agent = RoutingAgent()
state = [throughput, latency, p_loss]
action = agent.get_action(state)
# Simulate action (e.g., adjust MTU) and get reward
reward = 0.5 * throughput - 0.3 * latency - 0.2 * p_loss
next_state = [throughput * 1.1, latency * 0.9, p_loss * 0.8]  # Simulated improvement
agent.train(state, action, reward, next_state)
```

### Steps to Implement
1. **Create Replit Project**:
   - Sign in to www.replit.com, create a Python repl, and set up directories (`/scripts`, `/config`, `/models`, `/docs`).
   - Copy the prompt into `README.md` for reference.

2. **Install Dependencies**:
   - Add to `requirements.txt` (as listed) and run `pip install -r requirements.txt`.

3. **Secure Credentials**:
   - Create `.env` with AWS credentials and add to `.gitignore`.

4. **Develop Scripts**:
   - Implement `setup_ec2.py`, `configure_wireguard.py`, `optimize_routing.py`, `monitor_tunnel.py`, `test_tunnel.py`, and `deploy.sh` per the prompt.
   - Use the mathematical model in `optimize_routing.py` to adjust parameters.
   - Train the RL agent on Replit with simulated data.

5. **Deploy and Test**:
   - Deploy WireGuard to the EC2 instance using `deploy.sh`.
   - Configure the local PC with `client.conf` and test the tunnel.
   - Monitor performance with `monitor_tunnel.py` and adjust via RL.

6. **Document**:
   - Write `setup_guide.md`, `math_model.md`, and `troubleshoot.md`.
   - Include cost estimates and ISP upgrade recommendations.
